#!/usr/bin/env python
# vim:set ts=4 sw=4 et:
#
# Copyright 2015 UAVenture AG.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# Updated: Tarek Taha : tarek.taha@kustar.ac.ae, Vladimir Ermakov
#    - Changed topic names after re-factoring : https://github.com/mavlink/mavros/issues/233
#    - Use mavros.setpoint module for topics

# Ensure that EKF2_AID_MASK has vision set to on if the local_position is not publishing

# TODO, check for case whereby t265 or mavros disconnects

import os

import rospy
import thread
import threading
import time
import mavros

from numpy import linalg #linear algebra, can be used to find things like eigenvectors etc.
import numpy as np

from math import *
from mavros.utils import *
from mavros import setpoint as SP
from std_msgs.msg import Header #type 
from std_msgs.msg import Float64, Float32 #type from msg generation
from geometry_msgs.msg import PoseStamped, Quaternion, TwistStamped, TransformStamped #geometry
# from tf.transformations import quaternion_from_euler #transformation
from mavros_msgs.srv import CommandLong #service_class
from mavros_msgs.msg import PositionTarget,Thrust,AttitudeTarget
from sensor_msgs.msg import NavSatFix,Range #type
from tf2_msgs.msg import TFMessage

drone_name = os.getenv('DRONE_NAME') #environment variable set in bashrc(or exported in terminal)
publish_topic = drone_name + "/global_position/pose"

import math
import tf

# drone_name="uav0"
drone_name = os.getenv('DRONE_NAME') #environment variable set in bashrc(or exported in terminal)
odom_frame_id=drone_name+"/t265_odom_frame"

class vision:
    """
    This class sends position targets to FCU's position controller
    """
    def __init__(self):
        listener = tf.TransformListener()

        self.local_pos=PoseStamped()
        rospy.Subscriber(drone_name + "/mavros/local_position/pose", PoseStamped, self.position_callback)

        global_pos = rospy.Publisher(publish_topic, PoseStamped,queue_size=1)

        print(publish_topic)

        rate = rospy.Rate(200.0)

        while not rospy.is_shutdown():

            try:
                (trans,rot) = listener.lookupTransform(drone_name+"/mavros/local_position/pose", '/odom', rospy.Time(0))
            except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
                continue

            cmd = PoseStamped()

            cmd.pose.position.x=trans[0]+self.local_pos.pose.position.x
            cmd.pose.position.y=trans[1]+self.local_pos.pose.position.y
            cmd.pose.position.z=trans[2]+self.local_pos.pose.position.z

            cmd.pose.orientation.x=rot[0]+self.local_pos.pose.orientation.x
            cmd.pose.orientation.y=rot[1]+self.local_pos.pose.orientation.y
            cmd.pose.orientation.z=rot[2]+self.local_pos.pose.orientation.z
            cmd.pose.orientation.w=rot[3]+self.local_pos.pose.orientation.w

            angular = 4 * math.atan2(trans[1], trans[0])
            linear = 0.5 * math.sqrt(trans[0] ** 2 + trans[1] ** 2)

            cmd.linear.x = linear
            cmd.angular.z = angular

            global_pos.publish(cmd)

            rate.sleep()

    def position_callback(self,data):
        self.local_pos=data


if __name__ == '__main__':
    rospy.init_node(drone_name + '_vision', anonymous=True)

    node = vision()

    rospy.spin()  # spin() simply keeps python from exiting until this node is stopped
     

