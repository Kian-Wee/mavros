#!/usr/bin/env

# ## Publishes a topic with the the after tf transforms
  
import os
import rospy
import math
import os
from geometry_msgs.msg import PoseStamped
import tf

drone_name = os.getenv('DRONE_NAME') #environment variable set in bashrc(or exported in terminal)
publish_topic = drone_name + "/global_position/pose"

class transform():

    def __init__(self):

        self.listener = tf.TransformListener()

        self.local_pos=PoseStamped()
        rospy.Subscriber(drone_name + "/mavros/local_position/pose", PoseStamped, self.position_callback)

        global_pos = rospy.Publisher(publish_topic, PoseStamped,queue_size=1)

        print(publish_topic)

        rate = rospy.Rate(200.0)

        while not rospy.is_shutdown():

            try:
                (trans,rot) = listener.lookupTransform(drone_name+"/mavros/local_position/pose", '/odom', rospy.Time(0))
            except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
                continue

            cmd = PoseStamped()

            cmd.pose.position.x=trans[0]+self.local_pos.pose.position.x
            cmd.pose.position.y=trans[1]+self.local_pos.pose.position.y
            cmd.pose.position.z=trans[2]+self.local_pos.pose.position.z

            cmd.pose.orientation.x=rot[0]+self.local_pos.pose.orientation.x
            cmd.pose.orientation.y=rot[1]+self.local_pos.pose.orientation.y
            cmd.pose.orientation.z=rot[2]+self.local_pos.pose.orientation.z
            cmd.pose.orientation.w=rot[3]+self.local_pos.pose.orientation.w

            angular = 4 * math.atan2(trans[1], trans[0])
            linear = 0.5 * math.sqrt(trans[0] ** 2 + trans[1] ** 2)

            cmd.linear.x = linear
            cmd.angular.z = angular

            global_pos.publish(cmd)

            rate.sleep()

    def position_callback(self,data):
        self.local_pos=data

if __name__ == '__main__':
    rospy.init_node(drone_name+'_tf_transformer')

    node = transform()

    rospy.spin()


