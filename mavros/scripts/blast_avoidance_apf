#!/usr/bin/env python
# vim:set ts=4 sw=4 et:
#
# Copyright 2015 UAVenture AG.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# Updated: Tarek Taha : tarek.taha@kustar.ac.ae, Vladimir Ermakov
#    - Changed topic names after re-factoring : https://github.com/mavlink/mavros/issues/233
#    - Use mavros.setpoint module for topics

import rospy
import thread
import threading
import time
import mavros

import numpy as np

from math import *
from mavros.utils import *
from mavros import setpoint as SP
from std_msgs.msg import Header #type 
from std_msgs.msg import Float64, Float32 #type from msg generation
from geometry_msgs.msg import PoseStamped, Quaternion, TwistStamped, Vector3 #geometry
#from tf.transformations import quaternion_from_euler #transformation
from mavros_msgs.srv import CommandLong #service_class
from mavros_msgs.msg import PositionTarget,ActuatorControl
from sensor_msgs.msg import NavSatFix,Range,LaserScan #type
from teraranger_array.msg import RangeArray
from nav_msgs.msg import Odometry
from dynamic_reconfigure.server import Server
from mavros.cfg import setpidsConfig as ConfigType


class blast_avoidance_apf:
    """
    This class sends position targets to FCU's position controller
    """
    def __init__(self):
        self.z = 0.0
        self.x = 0.0
        self.y = 0.0 
        self.target_x = 0.0
        self.target_y = 0.0
        self.hold_target_y = 0.0
        self.target_z = 1.8

        self.armed = False  
        self.collective = RangeArray()
        self.rate = rospy.Rate(50) # 10hz is the original 
        self.sensor_2 = 0.0
        self.sensor_6 = 0.0
        self.timeout = 180
        self.local_position = PoseStamped()
        self.count = 0
        self.counter = 0
        self.actuator_control_message = ActuatorControl() 
        self.seq = 1
        self.blast_position = Vector3()
        self.scans = LaserScan()
        self.drone_front = 0.0
        self.drone_left = 0.0
        self.drone_right = 0.0
        self.drone_back = 0.0
        self.kp = 1.0
        self.kd = 1.0
        self.clearance = 0.75
        self.front_previous_error = 0.0
        self.left_previous_error = 0.0
        self.right_previous_error = 0.0
        self.back_previous_error = 0.0
        self.quadrant = 0.0
        self.rmse_x = 0.0
        self.rmse_y = 0.0
        self.activation = 0.0
        self.tolerance_percentage = 0.75 # max 1
        self.data_pts = 46 # max 93
        self.threshold = 0.0
        self.tolerance_gain = 0.04 # max 0.75, default used to be 0.1
        self.roll_x = 0.0
        self.pitch_y = 0.0
        self.yaw_z = 0.0
        self.lowest = 0.0


        rospy.wait_for_service('mavros/cmd/arming', 30) # wait for arming, queue for 30s

        # rospy.Subscriber("subscribed topic",topic type,callback invoked with the message as the first arg)  

        #rospy.Subscriber("/imu_odometry", Odometry, self.odometry_callback)
        rospy.Subscriber("/pose3dk", Vector3, self.blast_callback)
        rospy.Subscriber("mavros/local_position/pose", PoseStamped, self.position_callback)
        rospy.Subscriber("/scan", LaserScan, self.scan_callback)

        self.server = Server(ConfigType, self.reconfigure)
        self.pub_spt = rospy.Publisher('mavros/setpoint_position/local', PoseStamped, queue_size=10)
        
        #rospy.wait_for_service('mavros/cmd/command', 30)
        #self._srv_cmd_long = rospy.ServiceProxy('mavros/cmd/command', CommandLong, persistent=True)
      
        while not rospy.is_shutdown(): #subsequent functions below are automatically run using this while loop (inert functions)  

            ##############################################
            
            # if self.odometry_position.header.seq == None:
            #     self.x = self.local_position.pose.position.x 
            #     self.y = self.local_position.pose.position.y
            #     print "non active odometry" 
            # else:
            #     self.x = self.odometry_position.pose.pose.position.x 
            #     self.y = self.odometry_position.pose.pose.position.y 
            #     print "active odometry"


            ##############################################
            ##############################################

            if (self.blast_position.x or self.blast_position.y) != 0.0:

                # self.activation = 1.0

                if (self.blast_position.x > self.local_position.pose.position.x) and (self.blast_position.y < self.local_position.pose.position.y): # quadrant 1
                    self.quadrant = 1

                if (self.blast_position.x > self.local_position.pose.position.x) and (self.blast_position.y > self.local_position.pose.position.y): # quadrant 2
                    self.quadrant = 2

                if (self.blast_position.x < self.local_position.pose.position.x) and (self.blast_position.y > self.local_position.pose.position.y): # quadrant 3
                    self.quadrant = 3

                if (self.blast_position.x < self.local_position.pose.position.x) and (self.blast_position.y < self.local_position.pose.position.y): # quadrant 4
                    self.quadrant = 4

                self.x = self.target_x
                self.y = self.target_y
                self.z = self.target_z 

                print "active odometry", self.rmse_x, self.rmse_y,self.clearance, self.threshold, self.pitch_y, self.activation



            self.tolerance = self.lowest * self.tolerance_gain
            ##self.threshold = np.sqrt(((self.tolerance_percentage * self.data_pts * 2) * (self.tolerance ** 2)) / (self.tolerance_percentage * self.data_pts * 2)) 
            self.threshold = (self.tolerance_percentage * self.data_pts * 2) * (self.tolerance ** 2)

            if (self.drone_front + self.drone_right + self.drone_left + self.drone_back) > self.threshold:
                self.x = self.local_position.pose.position.x - (self.kp * self.drone_front) + (self.kp * self.drone_back)
                self.y = self.local_position.pose.position.y + (self.kp * self.drone_right) - (self.kp * self.drone_left)
                self.z = self.target_z
                print "obstacle detected", degrees(self.pitch_y), self.pitch_y, self.clearance, cos(self.pitch_y), self.clearance/cos(self.pitch_y)

            else:
                self.x = self.target_x
                self.y = self.target_y
                self.z = self.target_z 

            ##############################################
            ###############################################
            
            #print self.drone_front,  self.drone_back,  self.drone_left,  self.drone_right

            self.follow()
            self.rate.sleep() # The loop calls rate.sleep(), which sleeps just long enough to maintain the desired rate through the loop.


    def position_callback(self, data): # callback invoked with the message as the first arg
        self.local_position = data
        x = self.local_position.pose.orientation.x 
        y = self.local_position.pose.orientation.y
        z = self.local_position.pose.orientation.z 
        w = self.local_position.pose.orientation.w 

        """
        Convert a quaternion into euler angles (roll, pitch, yaw)
        roll is rotation around x in radians (counterclockwise)
        pitch is rotation around y in radians (counterclockwise)
        yaw is rotation around z in radians (counterclockwise)
        """
        t0 = +2.0 * (w * x + y * z)
        t1 = +1.0 - 2.0 * (x * x + y * y)
        self.roll_x = (abs(atan2(t0, t1)))
     
        t2 = +2.0 * (w * y - z * x)
        t2 = +1.0 if t2 > +1.0 else t2
        t2 = -1.0 if t2 < -1.0 else t2
        self.pitch_y = (abs(asin(t2)))
     
        t3 = +2.0 * (w * z + x * y)
        t4 = +1.0 - 2.0 * (y * y + z * z)
        self.yaw_z = (abs(atan2(t3, t4))) 

    def reconfigure(self, config, level):
        self.clearance = config.clearance
        self.kp = config.kp
        self.kd = config.kd
        self.tolerance_percentage = config.tolerance_percentage
        self.tolerance_gain = config.tolerance_gain
        self.data_pts = config.data_pts

        return config

    def blast_callback(self, data): # callback invoked with the message as the first arg
        self.blast_position = data  

    def scan_callback(self, data):
        self.scans = data

        back = 719 # back self.scans.ranges[719]
        left = 540 # left self.scans.ranges[540]
        right = 185 # right self.scans.ranges[185]
        front = 356 # front self.scans.ranges[350]
        low = 40.0

        for i in range(720):
            if self.scans.ranges[i] < low:
                low = self.scans.ranges[i]

        self.lowest = low    
        # anti-clockwise for actual:
        # quad_1y = []+range(540,632)
        # quad_1x = []+range(632,719)

        # quad_2y = []+range(93,185)
        # quad_2x = []+range(0,93)

        # quad_3y = []+range(185,278)
        # quad_3x = []+range(278,356)

        # quad_4y = []+range(448,540)
        # quad_4x = []+range(356,448)


        # anti-clockwise for simulation: (46,92)
        quad_1y = []+range(right,(self.data_pts + right)) # []+range(185,278)
        quad_1x = []+range((front - self.data_pts),front) # []+range(278,356)

        quad_2y = []+range((left - self.data_pts),left) # []+range(448,540)
        quad_2x = []+range(front,(front + self.data_pts)) # []+range(356,448)

        quad_3y = []+range(left,(self.data_pts + left))   # []+range(540,632)
        quad_3x = []+range((back - self.data_pts),back)  # []+range(632,719) 

        quad_4y = []+range((right - self.data_pts),right) # []+range(93,185)
        quad_4x = []+range(0,(0 + self.data_pts)) # []+range(0,93)

       
        front_obs = []+quad_2x+quad_1x
        back_obs = []+quad_3x+quad_4x
        left_obs = []+quad_2y+quad_3y
        right_obs = []+quad_1y+quad_4y
        f_total = 0.0
        f_error = 0.001
        b_total = 0.0
        b_error = 0.001
        l_total = 0.0
        l_error = 0.001
        r_total = 0.0
        r_error = 0.001            
        

        for i in front_obs:
            if self.scans.ranges[i] < (self.clearance/cos(self.pitch_y)):
                f_error += 1.0
                f_total += (self.clearance - self.scans.ranges[i]) ** 2 
        self.drone_front = np.sqrt(f_total/f_error)


        for i in back_obs:
            if self.scans.ranges[i] < (self.clearance/cos(self.pitch_y)):
                b_error += 1.0
                b_total += (self.clearance - self.scans.ranges[i]) ** 2     
        self.drone_back = np.sqrt(b_total/b_error)


        for i in left_obs:
            if self.scans.ranges[i] < (self.clearance/cos(self.roll_x)):
                l_error += 1.0
                l_total += (self.clearance - self.scans.ranges[i]) ** 2               
        self.drone_left = np.sqrt(l_total/l_error)


        for i in right_obs:
            if self.scans.ranges[i] < (self.clearance/cos(self.roll_x)):
                r_error += 1.0
                r_total += (self.clearance - self.scans.ranges[i]) ** 2               
        self.drone_right = np.sqrt(r_total/r_error)


        # if self.activation == 1.0:


        if self.quadrant == 1.0:
            accepted_y = 0.0
            accepted_x = 0.0
            rejected_x = 0.0
            rejected_y = 0.0
            y = round(0.78539 * (self.data_pts/93)) # 45 deg in rad
            for i in right_obs:
                
                if (self.scans.ranges[i] - ((np.abs(self.blast_position.y - self.local_position.pose.position.y))/cos(abs(y)))) < self.clearance:
                    rejected_y += 1.0
                else:
                    accepted_y += 1.0
                y -= self.scans.angle_increment

            x = round(0.78539 * (self.data_pts/93))
            for i in front_obs:
                
                if (self.scans.ranges[i] - ((np.abs(self.blast_position.x - self.local_position.pose.position.x))/cos(abs(x)))) < self.clearance:
                    rejected_x += 1.0
                else:
                    accepted_x += 1.0
                x -= self.scans.angle_increment

            #rmse_y = np.sqrt(total_scans_y/no_of_y)
            #rmse_x = np.sqrt(total_scans_x/no_of_x)

            self.rmse_x = accepted_y
            self.rmse_y = rejected_y

            if (rejected_x) > accepted_x:
                self.target_x = self.local_position.pose.position.x
            else: 
                self.target_x = self.blast_position.x 

            if (rejected_y) > accepted_y:
                self.target_y = self.local_position.pose.position.y 
            else:   
                self.target_y = self.blast_position.y 


        if self.quadrant == 2.0:
            accepted_y = 0.0
            accepted_x = 0.0
            rejected_x = 0.0
            rejected_y = 0.0
            y = round(0.78539 * (self.data_pts/93))
            for i in left_obs:
                
                if (self.scans.ranges[i] - ((np.abs(self.blast_position.y - self.local_position.pose.position.y))/cos(abs(y)))) < self.clearance:
                    rejected_y += 1.0
                else:
                    accepted_y += 1.0
                y -= self.scans.angle_increment

            x = round(0.78539 * (self.data_pts/93))
            for i in front_obs:
                
                if (self.scans.ranges[i] - ((np.abs(self.blast_position.x - self.local_position.pose.position.x))/cos(abs(x)))) < self.clearance:
                    rejected_x += 1.0
                else:
                    accepted_x += 1.0
                x -= self.scans.angle_increment

            #rmse_y = np.sqrt(total_scans_y/no_of_y)
            #rmse_x = np.sqrt(total_scans_x/no_of_x)

            self.rmse_x = accepted_y
            self.rmse_y = rejected_y

            if (rejected_x) > accepted_x:
                self.target_x = self.local_position.pose.position.x
            else: 
                self.target_x = self.blast_position.x 

            if (rejected_y) > accepted_y:
                self.target_y = self.local_position.pose.position.y 
            else:   
                self.target_y = self.blast_position.y 


        if self.quadrant == 3.0:
            accepted_y = 0.0
            accepted_x = 0.0
            rejected_x = 0.0
            rejected_y = 0.0
            y = round(0.78539 * (self.data_pts/93)) 
            for i in left_obs:
                
                if (self.scans.ranges[i] - ((np.abs(self.blast_position.y - self.local_position.pose.position.y))/cos(abs(y)))) < self.clearance:
                    rejected_y += 1.0
                else:
                    accepted_y += 1.0
                y -= self.scans.angle_increment

            x = round(0.78539 * (self.data_pts/93))
            for i in quad_3x:
                
                if (self.scans.ranges[i] - ((np.abs(self.blast_position.x - self.local_position.pose.position.x))/cos(abs(x)))) < self.clearance:
                    rejected_x += 1.0
                else:
                    accepted_x += 1.0
                x -= self.scans.angle_increment

            x2 = 0.0
            for i in quad_4x:
                
                if (self.scans.ranges[i] - ((np.abs(self.blast_position.x - self.local_position.pose.position.x))/cos(abs(x2)))) < self.clearance:
                    rejected_x += 1.0
                else:
                    accepted_x += 1.0
                x2 += self.scans.angle_increment

            #rmse_y = np.sqrt(total_scans_y/no_of_y)
            #rmse_x = np.sqrt(total_scans_x/no_of_x)

            self.rmse_x = accepted_y
            self.rmse_y = rejected_y

            if (rejected_x) > accepted_x:
                self.target_x = self.local_position.pose.position.x
            else: 
                self.target_x = self.blast_position.x 

            if (rejected_y) > accepted_y:
                self.target_y = self.local_position.pose.position.y 
            else:   
                self.target_y = self.blast_position.y 


        if self.quadrant == 4.0:
            accepted_y = 0.0
            accepted_x = 0.0
            rejected_x = 0.0
            rejected_y = 0.0
            y = round(0.78539 * (self.data_pts/93))
            for i in quad_4y:
                
                if (self.scans.ranges[i] - ((np.abs(self.blast_position.y - self.local_position.pose.position.y))/cos(abs(y)))) < self.clearance:
                    rejected_y += 1.0
                else:
                    accepted_y += 1.0
                y -= self.scans.angle_increment

            x = round(0.78539 * (self.data_pts/93))
            for i in quad_3x:
                
                if (self.scans.ranges[i] - ((np.abs(self.blast_position.x - self.local_position.pose.position.x))/cos(abs(x)))) < self.clearance:
                    rejected_x += 1.0
                else:
                    accepted_x += 1.0
                x -= self.scans.angle_increment

            x2 = 0.0
            for i in quad_4x:
                
                if (self.scans.ranges[i] - ((np.abs(self.blast_position.x - self.local_position.pose.position.x))/cos(abs(x2)))) < self.clearance:
                    rejected_x += 1.0
                else:
                    accepted_x += 1.0
                x2 += self.scans.angle_increment

            #rmse_y = np.sqrt(total_scans_y/no_of_y)
            #rmse_x = np.sqrt(total_scans_x/no_of_x)

            self.rmse_x = accepted_y
            self.rmse_y = rejected_y

            if (rejected_x) > accepted_x:
                self.target_x = self.local_position.pose.position.x
            else: 
                self.target_x = self.blast_position.x 

            if (rejected_y) > accepted_y:
                self.target_y = self.local_position.pose.position.y 
            else:   
                self.target_y = self.blast_position.y 


        #self.drone_back = self.scans.ranges[719] # back
        #self.drone_left = self.scans.ranges[540] # left
        #self.drone_right = self.scans.ranges[185] # right
        #self.drone_front = self.scans.ranges[350] # front
        
        #for i in self.scans.ranges:
        #    self.sensor_0 = self.scans.ranges[2].range # sensor no. always begins from 0 in python 

    def arm(self):
        if self.count < self.timeout:
            # FIXME: arm and switch to offboard
            # (need to wait the first few rounds until PX4 has the offboard stream)
            if not self.armed and self.count > 5:
                self._srv_cmd_long(False, 176, False,
                                   1, 6, 0, 0, 0, 0, 0)
                # make sure the first command doesn't get lost
                time.sleep(1)

                self._srv_cmd_long(False, 400, False,
                                   # arm
                                   1, 0, 0, 0, 0, 0, 0)

                self.armed = True
            self.count = self.count + 1
            self.rate.sleep() # The loop calls rate.sleep(), which sleeps just long enough to maintain the desired rate through the loop.


    def follow(self): 
        # Initialise necessary headers
        pos = PoseStamped()
        pos.header = Header() # initialising a new header for a new PoseStamped()
        pos.header.frame_id = "following_waypoints"

        # Establish desired setpoints
        pos.pose.position.x = self.x # North
        pos.pose.position.y = self.y
        pos.pose.position.z = self.z 

        # Establish desired orientation at setpoint
        roll_degrees = 0.0 
        roll = radians(roll_degrees)
        pitch_degrees = 0.0 
        pitch = radians(pitch_degrees)
        yaw_degrees = 0.0  
        yaw = radians(yaw_degrees)

        # Execute desired orientation
        # quaternion = quaternion_from_euler(roll, pitch, yaw) #roll,pitch,yaw
        # pos.pose.orientation = Quaternion(*quaternion)

        qx = np.sin(roll/2) * np.cos(pitch/2) * np.cos(yaw/2) - np.cos(roll/2) * np.sin(pitch/2) * np.sin(yaw/2)
        qy = np.cos(roll/2) * np.sin(pitch/2) * np.cos(yaw/2) + np.sin(roll/2) * np.cos(pitch/2) * np.sin(yaw/2)
        qz = np.cos(roll/2) * np.cos(pitch/2) * np.sin(yaw/2) - np.sin(roll/2) * np.sin(pitch/2) * np.cos(yaw/2)
        qw = np.cos(roll/2) * np.cos(pitch/2) * np.cos(yaw/2) + np.sin(roll/2) * np.sin(pitch/2) * np.sin(yaw/2)

        quaternion = [qx,qy,qz,qw]  # drone only takes in quarternion values, therefore have to do euler to quarternion conversion
        pos.pose.orientation = Quaternion(*quaternion)
        
        pos.header.stamp = rospy.Time.now() # Update timestamp for each published SP

        # Publishing to rostopic   
        self.pub_spt.publish(pos) # updated pose from pos.pose.orientation


    def deviance(self):
        # either u do the below or u need to use bitmasking for uint16, jus basically add the uint16 numbers found in mavros documentation
        pos = PositionTarget(coordinate_frame = PositionTarget.FRAME_LOCAL_NED, # (originally) Local coordinate frame, Z-up (x: north, y: east, z: down), somehow it transformed to ENU (x: east, y: north, z: up)
                             type_mask=
                             # PositionTarget.IGNORE_PX + PositionTarget.IGNORE_PY + PositionTarget.IGNORE_PZ +
                             PositionTarget.IGNORE_VX + PositionTarget.IGNORE_VY + PositionTarget.IGNORE_VZ +
                             PositionTarget.IGNORE_AFX + PositionTarget.IGNORE_AFY + PositionTarget.IGNORE_AFZ +
                             PositionTarget.IGNORE_YAW_RATE 
                             # PositionTarget.IGNORE_YAW
                             )

        pos.header.frame_id = "deviance" 

        # Establish desired setpoints
        pos.position.x = self.local_position.pose.position.x 
        pos.position.y = self.local_position.pose.position.y 
        pos.position.z = self.local_position.pose.position.z 
            
        pos.yaw = radians(180.0)

        pos.header.stamp = rospy.Time.now()
        self.pub_pos.publish(pos) 

    

if __name__ == '__main__':
    rospy.init_node('blast_avoidance_apf', anonymous=True)

    node = blast_avoidance_apf()

    rospy.spin()  # spin() simply keeps python from exiting until this node is stopped
     

