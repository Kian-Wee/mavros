#!/usr/bin/env python
# vim:set ts=4 sw=4 et:
#
# Adapted from follow+ script which saves additional odom information and lap counter
#
# Follows a marker(drone/human/robot) at a fixed time interval if the drone is moving
# 2 possible modes, position only setpoint or position and velocity setpoint
# Currently assumes that the marker will not walk/fly/move back into the drone and that the rate of marker publish is constant

## TODO
# CHANGE 3 FOLLOW CASES TO NESTED IF TO REDUCE REPEAT
# CHANGE TO FOLLOWER TO SAME NESTED CLASS ALSO

from turtle import pos
import rospy
import time
import csv
# import numpy as np

from math import *
from mavros.utils import *
# from mavros import setpoint as SP
from geometry_msgs.msg import PoseStamped #geometry
from nav_msgs.msg import Odometry
from mavros_msgs.msg import PositionTarget
from std_msgs.msg import Int32, Float32 # Lap counter
from borealis_msgs.msg import Breadcrumb

follow_namespace="/uav0"
# The following topic is for the position of object being followed, either Odometry or PoseStamped messages
follow_pos= follow_namespace + "/mavros/local_position/pose" #PoseStamped
follow_pos_odom= follow_namespace + "/mavros/local_position/odom" #Odometry
follow_type= "Odometry"
#/vrpn_client_node/BetaVroom/pose /uav0/mavros/setpoint_position/local
follow_pub=follow_namespace + "/breadcrumb"
follow_pub_all=follow_namespace + "/breadcrumb_all"

follower_namespace="/uav1"
follower_set= follower_namespace + "/mavros/setpoint_position/local" #object following
follower_setpts= follower_namespace + "/setpoints" #object following
follower_set_raw= follower_namespace + '/mavros/setpoint_raw/local' #object following with velocity
# Take note that odom topic has an additional pose for self.follower_pose.pose.pose
follower_pos= follower_namespace + "/mavros/local_position/odom" #/uav1/mavros/local_position/odom
followlag=1 #seconds behind followed object
barrier=1 #meters, if drone is this distance from followed object, it stops
rate=15

lap_topic="/uav0/lap" #lap counter, everytime it increments by 1 the lap error is computed
velocity_topic="uav0/velocity" #checks for velocity or position control where 0 is position and any other value is the set

class follow:
    """
    This class sends position targets to FCU's position controller
    """
    def __init__(self):

        #CHANGE
        # self.follow_position = PoseStamped() #callback data is saved here

        # Creates nested class which processes the different message types
        self.follow_object=self.followobject(follow_type)

        self.follower_position = Odometry() #callback data is saved here
        rospy.Subscriber(follower_pos, Odometry , self.followercallback)
        
        #For position setpoints
        self.follower_pub = rospy.Publisher(follower_set, PoseStamped, queue_size=10)
        self.follower_setpts = rospy.Publisher(follower_setpts, PoseStamped, queue_size=10)

        #For velocity setpoints
        self.follower_vel_pub = rospy.Publisher(follower_set_raw, PositionTarget, queue_size=10)
        
        self.lap_count = Int32() #callback data is saved here
        rospy.Subscriber(lap_topic, Int32 , self.lapcallback)

        self.velocity_setpoint = Float32() #callback data is saved here
        self.velocity_setpoint = 0 #default to position mode
        rospy.Subscriber(velocity_topic, Float32 , self.controlcallback)
        
        self.rate = rospy.Rate(rate) # 10hz

        # Velocity
        self.xvel=0
        self.yvel=0
        self.zvel=0

        # Velocity setpoint of follow drone(previous velocity)
        self.followprevx=0
        self.followprevy=0
        self.followprevz=0

        # Previous position of drone(initalised at start point)
        self.prevx=self.follower_position.pose.pose.position.x
        self.prevy=self.follower_position.pose.pose.position.y
        self.prevz=self.follower_position.pose.pose.position.z

        # Historical position of followed drone in array, total size is fixed based on rate*followlag
        # The most recent value is added at the back while the most dated value is at the front
        self.xarr=[self.prevx] * rate * followlag
        self.yarr=[self.prevy] * rate * followlag
        self.zarr=[self.prevz] * rate * followlag

        # Historical velocity of followed drone in array, total size is fixed based on rate*followlag
        # The most recent value is added at the back while the most dated value is at the front
        self.xvelarr=[self.prevx] * rate * followlag
        self.yvelarr=[self.prevy] * rate * followlag
        self.zvelarr=[self.prevz] * rate * followlag

        # Error Accumulated
        self.xerror=0
        self.yerror=0
        self.zerror=0
        self.error=sqrt(self.xerror**2 + self.yerror**2 + self.zerror**2)

        # Historical positions("Breadcrumbs"), velocities and errors of all sent setpoints, saves all positions
        # Breadcrumbs, timestamp, velocity, error accumulated
        self.totalarr=[["Timestamp", "X-Setpoint", "Y-Setpoint", "Z-Setpoint",
                        "X-Position", "Y-Position", "Z-Position",
                        "X-Error", "Y-Error", "Z-Error", "Eucaledian-Error",
                        "X-Orientation", "Y-Orientation", "Z-Orientation", "W-Orientation",
                        "X-Twist-Linear", "Y-Twist-Linear", "Z-Twist-Linear",
                        "X-Twist-Angular", "Y-Twist-Angular", "Z-Twist-Angular",
                        "X-Velocity-Following", "Y-Velocity-Following", "Z-Velocity-Following",
                        "X-Velocity", "Y-Velocity", "Z-Velocity", 
                        "X-Velocity-Error", "Y-Velocity-Error", "Z-Velocity-Error", "Eucalidean-Velocity-Error" , "Velocity-Setpoint"
                        ]]
        # self.totalarr.append([self.timestamp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  self.xvel, self.yvel, self.zvel, self.xerror, self.yerror, self.zerror, self.error])

        # Interrupt timer whenever drone gets within [barrier] threshold, waits until drone is [followlag] seconds away before reactivating
        self.inttimer=0

        # Keep track of laps
        self.prevlap =0
        # Keep track of the position of the pointer for the starting of the next lap to avoid scanning through the entire breadcrumb(self.totalarr) again
        # Start from 1 to avoid header line
        self.prevlaparr =1

        # Either one set of these setpoints are used for position or velocity

        # The position that will be sent to the following drone
        self.posetemp = PoseStamped()
        # Past position used for caculating error
        self.posepast = PoseStamped()

        # The position that will be sent to the following drone
        self.targettemp = PositionTarget()
        # Past position used for caculating error
        self.targetpast = PositionTarget()

        # Republish topics
        self.follow_repub = rospy.Publisher(follow_pub, Breadcrumb, queue_size=10)
        self.follow_repub_all = rospy.Publisher(follow_pub_all, Breadcrumb, queue_size=10)

        rospy.on_shutdown(self.save)
      
        while not rospy.is_shutdown(): #subsequent functions below are automatically run using this while loop (inert functions)  
            # print(self.velocity_setpoint)
            if self.velocity_setpoint == 0:
                # self.positioncontrol() 
                self.velocitycontrol()
            elif self.velocity_setpoint != 0:
                #self.positioncontrol()
                self.velocitycontrol() 
            else:
                 rospy.signal_shutdown("Invalid Control Mode, use Position or Velocity")

            # Check if lap has completed and append spacer and errors
            if self.prevlap != self.lap_count.data:
                self.tracklap() 

            # To republish the setpoints
            self.topicbroadcaster()

            self.followprevx=self.follow_object.velx
            self.followprevy=self.follow_object.vely
            self.followprevz=self.follow_object.velz

            self.rate.sleep() #The loop calls rate.sleep(), which sleeps just long enough to maintain the desired rate through the loop.

    def tracklap(self):

        self.xerror=0
        self.yerror=0
        self.zerror=0
        self.error=0

        self.xvelerror=0
        self.yvelerror=0
        self.zvelerror=0
        self.velerror=0

        self.lapdatacount = 0 # temp counter to keep track of number of data points/entries per lap

        # Calculate current lap errors
        for x in range(self.prevlaparr,len(self.totalarr)): #omit first column of headers
            self.xerror += abs(self.totalarr[x][7]) #convert to only positive numbers so the negative and positive dont cancel out each other
            self.yerror += abs(self.totalarr[x][8])
            self.zerror += abs(self.totalarr[x][9])
            self.xvelerror += abs(self.totalarr[x][-5]) #convert to only positive numbers so the negative and positive dont cancel out each other
            self.yvelerror += abs(self.totalarr[x][-4])
            self.zvelerror += abs(self.totalarr[x][-3])
            # self.error += self.totalarr[x][-1] # caculate based on x,y,z error
            self.lapdatacount+=1

        # If the follow drone has not been initalised yet or is not moving, prevent modulo by zero error
        if (self.lapdatacount==0):
            self.xerror =0
            self.yerror =0
            self.zerror =0
            self.error =0
            self.xvelerror =0
            self.yvelerror =0
            self.zvelerror =0
            self.velerror =0
        else:
            self.xerror=self.xerror/self.lapdatacount
            self.yerror=self.yerror/self.lapdatacount
            self.zerror=self.zerror/self.lapdatacount
            # self.error=self.error/self.lapdatacount
            self.error=sqrt(self.xerror**2 + self.yerror**2 + self.zerror**2)

            self.xvelerror= self.xvelerror/self.lapdatacount
            self.yvelerror= self.yvelerror/self.lapdatacount
            self.zvelerror= self.zvelerror/self.lapdatacount
            self.velerror=sqrt(self.xvelerror**2 + self.yvelerror**2 + self.zvelerror**2)

        # Append Spacer
        self.totalarr.append(["Lap: "+ str(self.lap_count.data), 0, 0, 0, 0, 0, 0,self.xerror, self.yerror, self.zerror, self.error, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, self.xvelerror,self.yvelerror,self.zvelerror,self.velerror, 0 ])
        self.prevlap=self.lap_count.data # Update lap number
        self.prevlaparr=len(self.totalarr)+1 # Update pointer to count the errors from next lap at the row after this

        # Print to terminal
        rospy.loginfo("LAP COUNT: %s",self.lap_count.data)
        rospy.loginfo("No of setpoints: %s", self.lapdatacount)
        rospy.loginfo("Average Lap Error: %s, X-Error: %s, Y-Error: %s, Z-Error: %s",self.error,self.xerror,self.yerror,self.zerror)
        rospy.loginfo("Average Lap Velocity Error: %s, X-Error: %s, Y-Error: %s, Z-Error: %s",self.velerror,self.xvelerror,self.yvelerror,self.zvelerror)
        

    # Uses a FIFO(first in first out) queue to store waypoints/breadcrumbs, the array size is determined by the rate and time to follow behind
    # TODO, use the dequeue class
    def positioncontrol(self):

        # Caculate euclidean distance to determine if the follower is far enough away
        eu_dist=sqrt(((self.follow_object.posx-self.follower_position.pose.pose.position.x)**2) + ((self.follow_object.posy-self.follower_position.pose.pose.position.y)**2))
        
        # Followed is within [barrier] distance of follower, publish previously acceptable distance
        # In this case, the drone is sent to the current position it is at and the setpoint array is untouched
        if eu_dist < barrier:
            rospy.loginfo("marker below safe threshold, stopping. %s", eu_dist)
            self.posetemp.pose.position.x = self.follower_position.pose.pose.position.x #Hover on the spot
            self.posetemp.pose.position.y = self.follower_position.pose.pose.position.y
            self.posetemp.pose.position.z = self.follower_position.pose.pose.position.z
            self.inttimer=time.time()
        
        # Time is less than [followlag] threshhold, start logging drone position but dont follow yet
        # Build up the setpoint array and wait for the drone to move [followlag]seconds away
        elif time.time() < self.inttimer + followlag:
            rospy.loginfo("waiting for marker to move away. %s", eu_dist)
            self.posetemp.pose.position.x = self.follower_position.pose.pose.position.x #Hover on the spot
            self.posetemp.pose.position.y = self.follower_position.pose.pose.position.y 
            self.posetemp.pose.position.z = self.follower_position.pose.pose.position.z

            self.xarr.append(self.follow_object.posx) #Append the current position of the followed device to the end of the setpoint array
            self.yarr.append(self.follow_object.posy)
            self.zarr.append(self.follow_object.posz)
            self.xarr.pop(0) #delete the most dated position at [followlag]s after sending to the follower
            self.yarr.pop(0)
            self.zarr.pop(0)


        # Time is more than [followlag] threshhold, publishing delayed setpoints in normal operation
        else:
            self.xarr.append(self.follow_object.posx) #Append the current position to the end of the list
            self.yarr.append(self.follow_object.posy)
            self.zarr.append(self.follow_object.posz)
            self.posetemp.pose.position.x = self.xarr[0]
            self.posetemp.pose.position.y = self.yarr[0]
            self.posetemp.pose.position.z = self.zarr[0]
            # rospy.loginfo("following pos normally at: %s %s %s", self.xarr[0], self.yarr[0], self.zarr[0]) # For debug
            self.xarr.pop(0) #delete the most dated position at [followlag]s after sending to the follower
            self.yarr.pop(0)
            self.zarr.pop(0)

            # Compute parameters for storage
            self.xvelerror= self.followprevx-self.follower_position.twist.twist.linear.x
            self.yvelerror= self.followprevy-self.follower_position.twist.twist.linear.y
            self.zvelerror= self.followprevz-self.follower_position.twist.twist.linear.z
            self.velerror=sqrt(self.xvelerror**2 + self.yvelerror**2 + self.zvelerror**2)
            self.xerror = self.posepast.pose.position.x-self.follower_position.pose.pose.position.x
            self.yerror = self.posepast.pose.position.y-self.follower_position.pose.pose.position.y
            self.zerror = self.posepast.pose.position.z-self.follower_position.pose.pose.position.z
            self.error=sqrt(self.xerror**2 + self.yerror**2 + self.zerror**2)

            # print(self.posepast.pose.position.x,self.follower_position.pose.pose.position.x)

            self.totalarr.append([time.time(), self.posepast.pose.position.x, self.posepast.pose.position.y, self.posepast.pose.position.z,
                                    self.follower_position.pose.pose.position.x, self.follower_position.pose.pose.position.y, self.follower_position.pose.pose.position.z, 
                                    self.xerror, self.yerror, self.zerror, self.error,
                                    self.follower_position.pose.pose.orientation.x, self.follower_position.pose.pose.orientation.y, self.follower_position.pose.pose.orientation.z, self.follower_position.pose.pose.orientation.w,
                                    self.follower_position.twist.twist.linear.x, self.follower_position.twist.twist.linear.y, self.follower_position.twist.twist.linear.z,
                                    self.follower_position.twist.twist.angular.x, self.follower_position.twist.twist.angular.y, self.follower_position.twist.twist.angular.z,
                                    self.follow_object.velx, self.follow_object.vely, self.follow_object.velz,
                                    self.follower_position.twist.twist.linear.x, self.follower_position.twist.twist.linear.y, self.follower_position.twist.twist.linear.z,
                                    self.xvelerror, self.yvelerror, self.zvelerror, self.velerror, self.velocity_setpoint])

        # Publish setpoints
        #self.follower_pub.publish(self.posetemp)
        self.follower_setpts.publish(self.posetemp)

        # Update previous location(independent of setpoint)
        self.prevx=self.follower_position.pose.pose.position.x
        self.prevy=self.follower_position.pose.pose.position.y
        self.prevz=self.follower_position.pose.pose.position.z

        # Update previous pose
        self.posepast=self.posetemp


    # velcity error
    def velocitycontrol(self):

        # Caculate euclidean distance to determine if the follower is far enough away
        eu_dist=sqrt(((self.follow_object.posx-self.follower_position.pose.pose.position.x)**2) + ((self.follow_object.posy-self.follower_position.pose.pose.position.y)**2))

        # Followed is within [barrier] distance of follower, publish previously acceptable distance
        # In this case, the drone is sent to the current position it is at and the setpoint array is untouched
        if eu_dist < barrier:
            rospy.loginfo("marker below safe threshold, stopping. %s", eu_dist)
            self.targettemp.position.x = self.follower_position.pose.pose.position.x #Hover on the spot
            self.targettemp.position.y = self.follower_position.pose.pose.position.y
            self.targettemp.position.z = self.follower_position.pose.pose.position.z
            self.targettemp.velocity.x = 0
            self.targettemp.velocity.y = 0
            self.targettemp.velocity.z = 0

            self.posetemp.pose.position.x = self.follower_position.pose.pose.position.x #Hover on the spot
            self.posetemp.pose.position.y = self.follower_position.pose.pose.position.y
            self.posetemp.pose.position.z = self.follower_position.pose.pose.position.z
            self.inttimer=time.time()
        
        # Time is less than [followlag] threshhold, start logging drone position but dont follow yet
        # Build up the setpoint array and wait for the drone to move [followlag]seconds away
        elif time.time() < self.inttimer + followlag:
            rospy.loginfo("waiting for marker to move away. %s", eu_dist)
            self.targettemp.position.x = self.follower_position.pose.pose.position.x #Hover on the spot
            self.targettemp.position.y = self.follower_position.pose.pose.position.y
            self.targettemp.position.z = self.follower_position.pose.pose.position.z
            self.targettemp.velocity.x = 0
            self.targettemp.velocity.y = 0
            self.targettemp.velocity.z = 0

            self.posetemp.pose.position.x = self.follower_position.pose.pose.position.x #Hover on the spot
            self.posetemp.pose.position.y = self.follower_position.pose.pose.position.y 
            self.posetemp.pose.position.z = self.follower_position.pose.pose.position.z

            self.xarr.append(self.follow_object.posx) #Append the current position of the followed device to the end of the setpoint array
            self.yarr.append(self.follow_object.posy)
            self.zarr.append(self.follow_object.posz)
            self.xarr.pop(0) #delete the most dated position at [followlag]s after sending to the follower
            self.yarr.pop(0)
            self.zarr.pop(0)

            self.xvelarr.append(self.follow_object.velx) #Append the current position of the followed device to the end of the setpoint array
            self.yvelarr.append(self.follow_object.vely)
            self.zvelarr.append(self.follow_object.velz)
            self.xvelarr.pop(0) #delete the most dated position at [followlag]s after sending to the follower
            self.yvelarr.pop(0)
            self.zvelarr.pop(0)


        # Time is more than [followlag] threshhold, publishing delayed setpoints in normal operation
        else:

            self.xarr.append(self.follow_object.posx) #Append the current position to the end of the list
            self.yarr.append(self.follow_object.posy)
            self.zarr.append(self.follow_object.posz)
            self.targettemp.position.x = self.xarr[0]
            self.targettemp.position.y = self.yarr[0]
            self.targettemp.position.z = self.zarr[0]
            self.posetemp.pose.position.x = self.xarr[0]
            self.posetemp.pose.position.y = self.yarr[0]
            self.posetemp.pose.position.z = self.zarr[0]
            self.targettemp.velocity.x = self.velocity_setpoint
            self.targettemp.velocity.y = self.velocity_setpoint
            self.targettemp.velocity.z = self.velocity_setpoint
            # rospy.loginfo("following vel normally at: %s %s %s", self.xarr[0], self.yarr[0], self.zarr[0]) # For debug
            self.xarr.pop(0) #delete the most dated position at [followlag]s after sending to the follower
            self.yarr.pop(0)
            self.zarr.pop(0)

            self.xvelarr.append(self.follow_object.velx) #Append the current position of the followed device to the end of the setpoint array
            self.yvelarr.append(self.follow_object.vely)
            self.zvelarr.append(self.follow_object.velz)
            self.xvelarr.pop(0) #delete the most dated position at [followlag]s after sending to the follower
            self.yvelarr.pop(0)
            self.zvelarr.pop(0)

            # Compute parameters for storage
            self.xvelerror= self.followprevx-self.follower_position.twist.twist.linear.x
            self.yvelerror= self.followprevy-self.follower_position.twist.twist.linear.y
            self.zvelerror= self.followprevz-self.follower_position.twist.twist.linear.z
            self.velerror=sqrt(self.xvelerror**2 + self.yvelerror**2 + self.zvelerror**2)
            self.xerror = self.targetpast.position.x-self.follower_position.pose.pose.position.x
            self.yerror = self.targetpast.position.y-self.follower_position.pose.pose.position.y
            self.zerror = self.targetpast.position.z-self.follower_position.pose.pose.position.z
            self.error=sqrt(self.xerror**2 + self.yerror**2 + self.zerror**2)

            self.totalarr.append([time.time(), self.targetpast.position.x, self.targetpast.position.y, self.targetpast.position.z,
                                    self.follower_position.pose.pose.position.x, self.follower_position.pose.pose.position.y, self.follower_position.pose.pose.position.z, 
                                    self.xerror, self.yerror, self.zerror, self.error,
                                    self.follower_position.pose.pose.orientation.x, self.follower_position.pose.pose.orientation.y, self.follower_position.pose.pose.orientation.z, self.follower_position.pose.pose.orientation.w,
                                    self.follower_position.twist.twist.linear.x, self.follower_position.twist.twist.linear.y, self.follower_position.twist.twist.linear.z,
                                    self.follower_position.twist.twist.angular.x, self.follower_position.twist.twist.angular.y, self.follower_position.twist.twist.angular.z,
                                    self.follow_object.velx, self.follow_object.vely, self.follow_object.velz,
                                    self.follower_position.twist.twist.linear.x, self.follower_position.twist.twist.linear.y, self.follower_position.twist.twist.linear.z,
                                    self.xvelerror, self.yvelerror, self.zvelerror, self.velerror, self.velocity_setpoint])

        # Publish setpoints
        self.follower_setpts.publish(self.posetemp)
        self.targettemp.coordinate_frame = 1
        #self.follower_vel_pub.publish(self.targettemp)

        # Update previous location(independent of setpoint)
        self.prevx=self.follower_position.pose.pose.position.x
        self.prevy=self.follower_position.pose.pose.position.y
        self.prevz=self.follower_position.pose.pose.position.z

        # Update previous pose
        self.targetpast=self.targettemp
        
    def followinit():
        pass

    def followstore():
        pass

    def followercallback(self,data): # callback invoked with the message as the first arg
        self.follower_position = data

    def lapcallback(self,data): # callback invoked with the message as the first arg
        self.lap_count = data

    def controlcallback(self,data): # callback invoked with the message as the first arg
        self.velocity_setpoint = data.data

    def land(self):
        pass

    def takeoff(self):
        pass

    def column(self, matrix, i):
        tempcol=[]
        # return [row[i] for row in matrix]
        return [matrix[row][i] for row in range(1, len(matrix))]

    # Republishes topics with time delay for visualisation
    def topicbroadcaster(self):
        self.temp=Breadcrumb()
        self.temp.velocity_setpoint=self.velocity_setpoint
        self.temp.position_x=self.xarr
        self.temp.position_y=self.yarr
        self.temp.position_z=self.zarr
        self.temp.velocity_x=self.xvelarr
        self.temp.velocity_y=self.yvelarr
        self.temp.velocity_z=self.zvelarr
        self.follow_repub.publish(self.temp)



        self.temp=Breadcrumb()
        self.temp.velocity_setpoint=self.velocity_setpoint
        self.temp.position_x=self.column(self.totalarr,1)
        self.temp.position_y=self.column(self.totalarr,2)
        self.temp.position_z=self.column(self.totalarr,3)
        self.temp.velocity_x=self.column(self.totalarr,21)
        self.temp.velocity_y=self.column(self.totalarr,22)
        self.temp.velocity_z=self.column(self.totalarr,23)
        self.follow_repub_all.publish(self.temp)
        

    def save(self):
        wtr = csv.writer(open ('out.csv', 'w'), delimiter=',', lineterminator='\n') #~/Home
        rmse=0
        counter=0

        for x in range(0,len(self.totalarr)): #omit first column of headers
            if isinstance(self.totalarr[x][0], float) == True or isinstance(self.totalarr[x][0], int) == True: # do not append to rmse if lap counter row
                rmse+=self.totalarr[x][10]
                counter+=1
            wtr.writerow (self.totalarr[x])
            # print("saving %s",x)
        rmse=sqrt(rmse/counter) #omit first column of headers and 
        
        print("RMSE is {}".format(rmse))

        # saves to home(~)
        wtr.writerow(["Total RMSE", rmse])

        # # Numpy code(depreciated)
        # self.totalarr.append(rmse)
        # newarr = np.array(self.totalarr)
        # np.savetxt("data.csv", newarr, delimiter=",", newline='\n', fmt='%s')

        # wtr.close()

        rospy.loginfo("Data Saved")

    class followobject:

        def __init__(self,follow_type):

            # Setup different suscribers for the different message types
            if follow_type=="PoseStamped":
                rospy.Subscriber(follow_pos, PoseStamped , self.followcallback)
            elif follow_type=="Odometry":
                rospy.Subscriber(follow_pos_odom, Odometry , self.followcallback)

            #Initalise variables
            self.posx=0
            self.posy=0
            self.posz=0
            self.velx=0
            self.vely=0
            self.velz=0

        # share callback function but save differently
        # Data needed pos(x,y,z), velocity(x,y,z)
        def followcallback(self,msg):
            if str(msg._type) == "nav_msgs/Odometry":
                self.posx = msg.pose.pose.position.x
                self.posy = msg.pose.pose.position.y
                self.posz = msg.pose.pose.position.z
                self.velx = msg.twist.twist.linear.x
                self.vely = msg.twist.twist.linear.y
                self.velz = msg.twist.twist.linear.z
            elif str(msg._type) == "geometry_msgs/PoseStamped":
                self.posx = msg.pose.position.x
                self.posy = msg.pose.position.y
                self.posz = msg.pose.position.z
            else:
                rospy.signal_shutdown("Unsupported follow message type")



if __name__ == '__main__':

    rospy.init_node('follow', anonymous=True)

    node = follow()

    rospy.spin()