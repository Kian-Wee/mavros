#!/usr/bin/env python

import rospy
import mavros
from geometry_msgs.msg import PoseStamped, PoseWithCovarianceStamped, Quaternion
from mavros_msgs.msg import State 
from mavros_msgs.srv import CommandBool, SetMode
from tf.transformations import quaternion_from_euler

mavros.set_namespace()

local_position = PoseStamped()
human_target = PoseWithCovarianceStamped()

def position_callback(data): # callback invoked with the message as the first arg
    local_position = data 

# callback method for state sub
current_state = State() 

def state_cb(state):
    global current_state
    current_state = state

def human_target_pos(data):
    human_target=data


local_pos_pub = rospy.Publisher('uav0/mavros/setpoint_position/local', PoseStamped, queue_size=10) #UAV0
state_sub = rospy.Subscriber('uav0/mavros/state', State, state_cb)
human_target_pos_sub = rospy.Suscriber("borealis/command/pose",PoseWithCovarianceStamped ,human_target_pos)

pose = PoseStamped()
pose.pose.position.x = 0
pose.pose.position.y = 0
pose.pose.position.z = 0.75



def position_control():

    print "starting position control"
    
    rospy.init_node('offb_node', anonymous=True)
    prev_state = current_state
    rosrate = 20
    rate = rospy.Rate(rosrate) # MUST be more then 2Hz

    # send a few setpoints before starting
    for i in range(100):
        local_pos_pub.publish(pose)
        rate.sleep()
    
    # wait for FCU connection
    while not current_state.connected:
        rate.sleep()

    last_request = rospy.get_rostime()
    while not rospy.is_shutdown():
        pose.header.stamp = rospy.Time.now()
        # print current_state
        if current_state.armed == True:
            print "sending position"
            posetemp = PoseStamped()
            posetemp.pose.position.x = local_position.pose.position.x
            posetemp.pose.position.y = local_position.pose.position.y
            posetemp.pose.position.z = local_position.pose.position.z
            local_pos_pub.publish(posetemp)
            rate.sleep()
        if current_state.armed == True and current_state.mode == "OFFBOARD":
            pose.pose.position.x = human_target.pose.pose.position.x
            pose.pose.position.y = human_target.pose.pose.position.y
            pose.pose.position.z = human_target.pose.pose.position.z

            # yaw = math.radians(yaw_degrees)
            quaternion = quaternion_from_euler(0, 0, human_target.pose.orientation.w)
            pose.pose.orientation = Quaternion(*quaternion)

            print "sending waypoint:"  human_target.pose.pose.position.x "," human_target.pose.pose.position.y "," human_target.pose.pose.position.z
            local_pos_pub.publish(pose)
            rate.sleep()
        else:
            print "not currently armed"
            posetemp = PoseStamped()
            posetemp.pose.position.x = local_position.pose.position.x
            posetemp.pose.position.y = local_position.pose.position.y
            posetemp.pose.position.z = local_position.pose.position.z
            local_pos_pub.publish(posetemp)
            rate.sleep()

if __name__ == '__main__':
    local_pos_sub = rospy.Subscriber("/mavros/local_position/pose", PoseStamped, position_callback)
    try:
        position_control()
    except rospy.ROSInterruptException:
        pass