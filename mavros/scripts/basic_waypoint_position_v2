#!/usr/bin/env python

# WIP

import rospy
import mavros
from geometry_msgs.msg import PoseStamped, PoseWithCovarianceStamped
from mavros_msgs.msg import State 
from mavros_msgs.srv import CommandBool, SetMode

mavros.set_namespace()

# local_position = PoseStamped()
# human_target = PoseWithCovarianceStamped()

# setpoints= ([0,0,0],[0,0,1])

# def position_callback(data): # callback invoked with the message as the first arg
#     local_position = data 

# # callback method for state sub
# current_state = State() 
# #offb_set_mode = SetMode
# def state_cb(state):
#     global current_state
#     current_state = state

# def human_target_pos(data):
#     human_target=data


# pose = PoseStamped()
# pose.pose.position.x = 0
# pose.pose.position.y = 0
# pose.pose.position.z = 1.5



# def position_control():

#     print "starting position control"
    
#     rospy.init_node('offb_node', anonymous=True)
#     prev_state = current_state
#     rosrate = 20
#     rate = rospy.Rate(rosrate) # MUST be more then 2Hz

#     # send a few setpoints before starting
#     for i in range(100):
#         local_pos_pub.publish(pose)
#         rate.sleep()
    
#     # wait for FCU connection
#     while not current_state.connected:
#         rate.sleep()

#     last_request = rospy.get_rostime()
#     while not rospy.is_shutdown():
#         # now = rospy.get_rostime()
#         # if current_state.mode != "OFFBOARD" and (now - last_request > rospy.Duration(5.)):
#         #     set_mode_client(base_mode=0, custom_mode="OFFBOARD")
#         #     last_request = now
#         # else:
#         #     if not current_state.armed and (now - last_request > rospy.Duration(5.)):
#         #        arming_client(True)
#         #        last_request = now 

#         # # older versions of PX4 always return success==True, so better to check Status instead
#         # if prev_state.armed != current_state.armed:
#         #     rospy.loginfo("Vehicle armed: %r" % current_state.armed)
#         # if prev_state.mode != current_state.mode: 
#         #     rospy.loginfo("Current mode: %s" % current_state.mode)
#         # prev_state = current_state

#         # Update timestamp and publish pose 
#         pose.header.stamp = rospy.Time.now()
#         # print current_state
#         if current_state.armed == True:
#             print "sending position"
#             posetemp = PoseStamped()
#             posetemp.pose.position.x = local_position.pose.position.x
#             posetemp.pose.position.y = local_position.pose.position.y
#             posetemp.pose.position.z = local_position.pose.position.z
#             local_pos_pub.publish(posetemp)
#             rate.sleep()
#         if current_state.armed == True and current_state.mode == "OFFBOARD":
#             human_target.pose.pose.position.x
#             print "sending waypoint:"  "waypoint"
#             local_pos_pub.publish(pose)
#             rate.sleep()
#             # for i in range(5 * rosrate):
#             #     print "landing"
#             #     set_mode_client(base_mode=0, custom_mode="AUTO.LAND")
#             #     rate.sleep()'arming'
#             print "disarming and ending"
#             # arming_client(False)
#             break
#         else:
#             print "not currently armed"
#             posetemp = PoseStamped()
#             posetemp.pose.position.x = local_position.pose.position.x
#             posetemp.pose.position.y = local_position.pose.position.y
#             posetemp.pose.position.z = local_position.pose.position.z
#             local_pos_pub.publish(posetemp)
#             rate.sleep()

class basic_drone:
    def __init__(self):
        # Initalise drone at origin
        self.x = 0.0
        self.y = 0.0
        self.z = 0.0

        # Publisher and Suscribers
        self.local_pos_pub = rospy.Publisher('uav0/mavros/setpoint_position/local', PoseStamped, queue_size=10) #UAV0
        self.local_pos_sub = rospy.Subscriber("uav0/mavros/local_position/pose", PoseStamped, self.position_callback)

        self.state_sub = rospy.Subscriber('uav0/mavros/state', State, self.state_callback)
        self.arming_client = rospy.ServiceProxy('uav0/mavros/cmd/arming', CommandBool)
        self.human_target_pos_sub = rospy.Suscriber("borealis/command/pose",PoseWithCovarianceStamped ,self.human_target_pos_callback)
        self.set_mode_client = rospy.ServiceProxy(mavros.get_topic('set_mode'), SetMode)

        rate = rospy.Rate(50)

    




if __name__ == '__main__':
    try:
        drone = basic_drone
    except rospy.ROSInterruptException:
        pass
    ros.spin()