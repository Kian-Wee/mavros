#!/usr/bin/env python
# vim:set ts=4 sw=4 et:
#
# Copyright 2015 UAVenture AG.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# Updated: Tarek Taha : tarek.taha@kustar.ac.ae, Vladimir Ermakov
#    - Changed topic names after re-factoring : https://github.com/mavlink/mavros/issues/233
#    - Use mavros.setpoint module for topics

# TODO? moving_vel and hovering_vel needs changing to the current yaw

import rospy
import thread
import threading
import time
import mavros
import os

import numpy as np
#import sys, select, termios, tty
from select import select

from math import *
from mavros.utils import *
from mavros import setpoint as SP
from std_msgs.msg import Header, String, Bool #type 
from std_msgs.msg import Float64, Float32, Int32 #type from msg generation
from geometry_msgs.msg import PoseStamped, Pose, Quaternion, TwistStamped, Twist, Point #geometry
#from tf.transformations import quaternion_from_euler #transformation
from mavros_msgs.srv import CommandLong #service_class
from nav_msgs.msg import Path
from mavros_msgs.msg import PositionTarget,ActuatorControl
from sensor_msgs.msg import NavSatFix,Range,LaserScan #type
from rlss_ros.msg import dyn_params, PiecewiseTrajectory, Bezier 
#from teraranger_array.msg import RangeArray

id = os.getenv('DRONE_NUMBER') #environment variable set in bashrc(or exported in terminal)

class borealis_movement:
    """
    This class sends position targets to FCU's position controller
    """
    def __init__(self):
        self.z = 2.2   
        self.armed = False  
        #self.collective = RangeArray()
        self.rate = rospy.Rate(10) # 10hz is the original 
        self.sensor_2 = 0.0
        self.sensor_6 = 0.0
        self.timeout = 180
        self.local_position = PoseStamped()
        self.count = 0
        self.counter = 0
        self.actuator_control_message = ActuatorControl() 
        self.seq = 1
        self.getkeys = String()
        self.rotation = 0.0
        self.speed = 0.45
        self.final_traj = PiecewiseTrajectory()
        self.final_traj_0 = Pose()
        self.final_traj_1 = Pose()
        self.planner_activation = Bool()
        self.pos_x_0 = 0.0
        self.pos_y_0 = 0.0
        self.pos_z_0 = 0.0
        self.pos_x_1 = 0.0
        self.pos_y_1 = 0.0
        self.pos_z_1 = 0.0
        self.traj_0 = Bezier()
        self.traj_1 = Bezier()
        self.yaw = Float64()
        self.yaw_hold = Float64()
        # self.dummy_yaw = Float64()
        self.dummy = Point()
        self.Bezier_List = [self.traj_0,self.traj_1 ]
        self.mode = String()
        self.roll_x = 0.0
        self.pitch_y = 0.0
        self.yaw_z = 0.0
        self.distract_x = 0.0
        self.distract_y = 0.0
        self.distract_z = 0.0
        self.offset_y = 0.9
        self.tolerance = 0.3
        self.whole = Path()
    
        self.orientation = PoseStamped()

        # rospy.wait_for_service('mavros/cmd/arming', 30) # wait for arming, queue for 30s  # this bitch statement gives alot of problem

        # rospy.Subscriber("subscribed topic",topic type,callback invoked with the message as the first arg)  

        #rospy.Subscriber("hub_1/ranges_raw", RangeArray, self.hub_callback)
        #rospy.Subscriber("mavros/local_position/pose", PoseStamped, self.position_callback)
        #self.pub_pos = rospy.Publisher('mavros/setpoint_raw/local', PositionTarget, queue_size=10)
        #self.pub_spt = rospy.Publisher('mavros/setpoint_position/local', PoseStamped, queue_size=10)
        #self.pub_vel = rospy.Publisher('mavros/setpoint_velocity/cmd_vel', TwistStamped, queue_size=10)
        #self.message_pub = rospy.Publisher("/mavros/actuator_control", ActuatorControl, queue_size=10)

        rospy.Subscriber("/uav" + id + "/mavros/local_position/pose", PoseStamped, self.position_callback) # need to change to env variables for id
        
        rospy.Subscriber("/uav" + id + "/final_trajectory_pose", PoseStamped, self.traj_0_callback) # edit this tmr to include the env var for id
        # rospy.Subscriber("pose3dk", PoseStamped, self.traj_0_callback)
        rospy.Subscriber("/final_trajectory_pose_1", PoseStamped, self.traj_1_callback)
        rospy.Subscriber("/uav" + id + "/whole_trajectory_pose", Path, self.whole_traj_callback)
        rospy.Subscriber("/uav" + id + "/final_trajectory", PiecewiseTrajectory, self.traj_callback)
        rospy.Subscriber("/uav" + id + "/planner_activation", Bool, self.activation_callback)
        # rospy.Subscriber("/yaw3dk", Float64, self.yaw_callback)
        
        # sweep motion towards dummy        
        # rospy.Subscriber("/uav" + id + "/command/yaw", Float64, self.yaw_callback)
        rospy.Subscriber("/uav" + id + "/hri_mode", String, self.mode_callback)
        rospy.Subscriber("/uav" + id + "/setpoint", PoseStamped, self.dummy_pose_callback)
        # self.dummy.x=0
        # self.dummy.y=0
        # rospy.Subscriber("/target_yaw", Float64, self.dummy_yaw_callback)


        # need to change to env variables
        self.pub_pos = rospy.Publisher("/uav" + id + "/mavros/setpoint_raw/local", PositionTarget, queue_size=10)
        self.pub_traj = rospy.Publisher("/uav" + id + "/edited_whole_trajectory_pose", Path, queue_size=10)
        self.pub_spt = rospy.Publisher("/uav" + id + "/mavros/setpoint_position/local", PoseStamped, queue_size=10)
        self.pub_vel = rospy.Publisher("/uav" + id + "/mavros/setpoint_velocity/cmd_vel", TwistStamped, queue_size=10)
        #self.message_pub = rospy.Publisher("mavros/actuator_control", ActuatorControl, queue_size=10)

        #rospy.wait_for_service('/mavros/cmd/command', 30)
        #self._srv_cmd_long = rospy.ServiceProxy('mavros/cmd/command', CommandLong, persistent=True)
       

        while not rospy.is_shutdown():

            print self.pos_x_0
            print self.pos_y_0
            print self.pos_z_0
            #print len(self.Bezier_List)
            #print self.planner_activation.data
            if self.mode=="Sweep":
                print "Sweeping"
                self.Hovering()
                    
            elif self.mode == "Distract" and self.dummy.x != 0.0:
                if self.count == 0:
                    print "distract_1"
                    self.distract_x = self.dummy.x 
                    self.distract_y = self.dummy.y + self.offset_y 
                    self.distract_z = self.pos_z_0 
                    if abs(self.distract_x - self.local_position.pose.position.x) < self.tolerance and abs(self.distract_y - self.local_position.pose.position.y) < self.tolerance:
                        self.count = 1
                else:
                    print "distract_0"
                    self.distract_x = self.pos_x_0
                    self.distract_y = self.pos_y_0
                    self.distract_z = self.pos_z_0 
                    if abs(self.distract_x - self.local_position.pose.position.x) < self.tolerance and abs(self.distract_y - self.local_position.pose.position.y) < self.tolerance:
                        self.count = 0
                self.Distract()
                            
            elif self.mode == "Distract" and self.dummy.x != 0.0:
                print "trying to distract but target not detected"
                self.Hovering()

            else:
                if self.planner_activation.data:
                    self.Moving()
                    print "Moving w planner"
                else:
                    self.Hovering()
                    print "Hovering w planner"
                self.count = 0
            
            self.rate.sleep()


    def whole_traj_callback(self, data):
        temp = Path()
        temp = data
        self.whole.header.frame_id = "odom"
        self.whole.poses = temp.poses
        self.pub_traj.publish(self.whole)


    def position_callback(self, data): # callback invoked with the message as the first arg
        self.local_position = data
        x = self.local_position.pose.orientation.x 
        y = self.local_position.pose.orientation.y
        z = self.local_position.pose.orientation.z 
        w = self.local_position.pose.orientation.w 

        """
        Convert a quaternion into euler angles (roll, pitch, yaw)
        roll is rotation around x in radians (counterclockwise)
        pitch is rotation around y in radians (counterclockwise)
        yaw is rotation around z in radians (counterclockwise)
        """
        t0 = +2.0 * (w * x + y * z)
        t1 = +1.0 - 2.0 * (x * x + y * y)
        self.roll_x = (abs(atan2(t0, t1)))
     
        t2 = +2.0 * (w * y - z * x)
        t2 = +1.0 if t2 > +1.0 else t2
        t2 = -1.0 if t2 < -1.0 else t2
        self.pitch_y = (abs(asin(t2)))
     
        t3 = +2.0 * (w * z + x * y)
        t4 = +1.0 - 2.0 * (y * y + z * z)
        self.yaw_z = (abs(atan2(t3, t4))) 


    def mode_callback(self, data):
        self.mode = data.data 


    def dummy_pose_callback(self, data):
        if self.mode == "Distract":
            self.dummy.x=data.pose.position.x
            self.dummy.y=data.pose.position.y

        self.data         


    # def yaw_callback(self,data):
    #     self.yaw = data

    # def dummy_yaw_callback(self,data):
    #     self.dummy_yaw = data


    def activation_callback(self, data): # callback invoked with the message as the first arg
        self.planner_activation = data 


    def traj_0_callback(self, data): # callback invoked with the message as the first arg
        self.final_traj_0 = data
        self.pos_x_0 = self.final_traj_0.pose.position.x
        self.pos_y_0 = self.final_traj_0.pose.position.y
        self.pos_z_0 = self.final_traj_0.pose.position.z


    def traj_1_callback(self, data): # callback invoked with the message as the first arg
        self.final_traj_1 = data
        self.pos_x_1 = self.final_traj_1.pose.position.x
        self.pos_y_1 = self.final_traj_1.pose.position.y
        self.pos_z_1 = self.final_traj_1.pose.position.z
    

    def traj_callback(self, data): # callback invoked with the message as the first arg
        self.final_traj = data 
        
        # if self.planner_activation.data:
        
        #     self.pos_x_0 = self.final_traj.pieces[0].end[0]
        #     self.pos_y_0 = self.final_traj.pieces[0].end[1]
        #     self.pos_z_0 = self.final_traj.pieces[0].end[2]

        #     self.pos_x_1 = self.final_traj.pieces[1].end[0]
        #     self.pos_y_1 = self.final_traj.pieces[1].end[1]
        #     self.pos_z_1 = self.final_traj.pieces[1].end[2]
            
    
    def arm(self):
        if self.count < self.timeout:
            # FIXME: arm and switch to offboard
            # (need to wait the first few rounds until PX4 has the offboard stream)
            if not self.armed and self.count > 5:
                self._srv_cmd_long(False, 176, False,
                                   1, 6, 0, 0, 0, 0, 0)
                # make sure the first command doesn't get lost
                time.sleep(1)

                self._srv_cmd_long(False, 400, False,
                                   # arm
                                   1, 0, 0, 0, 0, 0, 0)

                self.armed = True
            self.count = self.count + 1
            self.rate.sleep() # The loop calls rate.sleep(), which sleeps just long enough to maintain the desired rate through the loop.




    def Hovering(self): 
       # Initialise necessary headers
        pos = PoseStamped()
        pos.header = Header() # initialising a new header for a new PoseStamped()
        pos.header.frame_id = "Hovering"

        # Establish desired setpoints
        # pos.pose.position.x = self.local_position.pose.position.x # North
        # pos.pose.position.y = self.local_position.pose.position.y 
        # pos.pose.position.z = self.z 

        # Establish desired setpoints
        pos.pose.position.x = self.pos_x_0  # North
        pos.pose.position.y = self.pos_y_0
        pos.pose.position.z = self.pos_z_0

        # # Establish desired orientation at setpoint
        # roll_degrees = 0.0 
        # roll = radians(roll_degrees)
        # pitch_degrees = 0.0 
        # pitch = radians(pitch_degrees)
        # yaw_degrees = 0.0  
        # yaw = radians(self.yaw.data)

        # # Execute desired orientation
        # # quaternion = quaternion_from_euler(roll, pitch, yaw) #roll,pitch,yaw
        # # pos.pose.orientation = Quaternion(*quaternion)

        # qx = np.sin(roll/2) * np.cos(pitch/2) * np.cos(yaw/2) - np.cos(roll/2) * np.sin(pitch/2) * np.sin(yaw/2)
        # qy = np.cos(roll/2) * np.sin(pitch/2) * np.cos(yaw/2) + np.sin(roll/2) * np.cos(pitch/2) * np.sin(yaw/2)
        # qz = np.cos(roll/2) * np.cos(pitch/2) * np.sin(yaw/2) - np.sin(roll/2) * np.sin(pitch/2) * np.cos(yaw/2)
        # qw = np.cos(roll/2) * np.cos(pitch/2) * np.cos(yaw/2) + np.sin(roll/2) * np.sin(pitch/2) * np.sin(yaw/2)

        # quaternion = [qx,qy,qz,qw]  # drone only takes in quarternion values, therefore have to do euler to quarternion conversion
        # pos.pose.orientation = Quaternion(*quaternion)

        pos.pose.orientation = self.orientation.pose.orientation
        
        #pos.header.stamp = rospy.Time.now() # Update timestamp for each published SP

        # Publishing to rostopic   
        self.pub_spt.publish(pos) # updated pose from pos.pose.orientation
    

    def Moving(self): 
        # Initialise necessary headers
        pos = PoseStamped()
        pos.header = Header() # initialising a new header for a new PoseStamped()
        pos.header.frame_id = "Moving"

        # Establish desired setpoints
        pos.pose.position.x = self.pos_x_0  # North
        pos.pose.position.y = self.pos_y_0
        pos.pose.position.z = self.pos_z_0

        # # Establish desired orientation at setpoint
        # roll_degrees = 0.0 
        # roll = radians(roll_degrees)
        # pitch_degrees = 0.0 
        # pitch = radians(pitch_degrees)
        # yaw_degrees = 0.0  
        # yaw = radians(self.yaw.data)

        # # Execute desired orientation
        # # quaternion = quaternion_from_euler(roll, pitch, yaw) #roll,pitch,yaw
        # # pos.pose.orientation = Quaternion(*quaternion)

        # qx = np.sin(roll/2) * np.cos(pitch/2) * np.cos(yaw/2) - np.cos(roll/2) * np.sin(pitch/2) * np.sin(yaw/2)
        # qy = np.cos(roll/2) * np.sin(pitch/2) * np.cos(yaw/2) + np.sin(roll/2) * np.cos(pitch/2) * np.sin(yaw/2)
        # qz = np.cos(roll/2) * np.cos(pitch/2) * np.sin(yaw/2) - np.sin(roll/2) * np.sin(pitch/2) * np.cos(yaw/2)
        # qw = np.cos(roll/2) * np.cos(pitch/2) * np.cos(yaw/2) + np.sin(roll/2) * np.sin(pitch/2) * np.sin(yaw/2)

        # quaternion = [qx,qy,qz,qw]  # drone only takes in quarternion values, therefore have to do euler to quarternion conversion
        # pos.pose.orientation = Quaternion(*quaternion)
        
        pos.pose.orientation = self.orientation.pose.orientation

        # pos.header.stamp = self.final_traj_0.header.stamp # Update timestamp for each published SP

        # Publishing to rostopic   
        self.pub_spt.publish(pos) # updated pose from pos.pose.orientation

    
    def Distract(self): 
        # Initialise necessary headers
        pos = PoseStamped()
        pos.header = Header() # initialising a new header for a new PoseStamped()
        pos.header.frame_id = "Distracting"

        # Establish desired setpoints
        pos.pose.position.x = self.distract_x  # North
        pos.pose.position.y = self.distract_y
        pos.pose.position.z = self.distract_z

        # # Establish desired orientation at setpoint
        # roll_degrees = 0.0 
        # roll = radians(roll_degrees)
        # pitch_degrees = 0.0 
        # pitch = radians(pitch_degrees)
        # yaw_degrees = 0.0  
        # yaw = radians(self.yaw.data)

        # # Execute desired orientation
        # # quaternion = quaternion_from_euler(roll, pitch, yaw) #roll,pitch,yaw
        # # pos.pose.orientation = Quaternion(*quaternion)

        # qx = np.sin(roll/2) * np.cos(pitch/2) * np.cos(yaw/2) - np.cos(roll/2) * np.sin(pitch/2) * np.sin(yaw/2)
        # qy = np.cos(roll/2) * np.sin(pitch/2) * np.cos(yaw/2) + np.sin(roll/2) * np.cos(pitch/2) * np.sin(yaw/2)
        # qz = np.cos(roll/2) * np.cos(pitch/2) * np.sin(yaw/2) - np.sin(roll/2) * np.sin(pitch/2) * np.cos(yaw/2)
        # qw = np.cos(roll/2) * np.cos(pitch/2) * np.cos(yaw/2) + np.sin(roll/2) * np.sin(pitch/2) * np.sin(yaw/2)

        # quaternion = [qx,qy,qz,qw]  # drone only takes in quarternion values, therefore have to do euler to quarternion conversion
        # pos.pose.orientation = Quaternion(*quaternion)
        
        pos.pose.orientation = self.orientation.pose.orientation

        # pos.header.stamp = self.final_traj_0.header.stamp # Update timestamp for each published SP

        # Publishing to rostopic   
        self.pub_spt.publish(pos) # updated pose from pos.pose.orientation


    # def Hovering_1(self): 
    #    # Initialise necessary headers
    #     pos = PoseStamped()
    #     pos.header = Header() # initialising a new header for a new PoseStamped()
    #     pos.header.frame_id = "Hovering_1"

    #     # Establish desired setpoints
    #     pos.pose.position.x = self.local_position.pose.position.x # North
    #     pos.pose.position.y = self.local_position.pose.position.y 
    #     pos.pose.position.z = self.z 

    #     # Establish desired orientation at setpoint
    #     roll_degrees = 0.0 
    #     roll = radians(roll_degrees)
    #     pitch_degrees = 0.0 
    #     pitch = radians(pitch_degrees)
    #     yaw_degrees = 0.0  
    #     yaw = radians(yaw_degrees)

    #     # Execute desired orientation
    #     # quaternion = quaternion_from_euler(roll, pitch, yaw) #roll,pitch,yaw
    #     # pos.pose.orientation = Quaternion(*quaternion)

    #     qx = np.sin(roll/2) * np.cos(pitch/2) * np.cos(yaw/2) - np.cos(roll/2) * np.sin(pitch/2) * np.sin(yaw/2)
    #     qy = np.cos(roll/2) * np.sin(pitch/2) * np.cos(yaw/2) + np.sin(roll/2) * np.cos(pitch/2) * np.sin(yaw/2)
    #     qz = np.cos(roll/2) * np.cos(pitch/2) * np.sin(yaw/2) - np.sin(roll/2) * np.sin(pitch/2) * np.cos(yaw/2)
    #     qw = np.cos(roll/2) * np.cos(pitch/2) * np.cos(yaw/2) + np.sin(roll/2) * np.sin(pitch/2) * np.sin(yaw/2)

    #     quaternion = [qx,qy,qz,qw]  # drone only takes in quarternion values, therefore have to do euler to quarternion conversion
    #     pos.pose.orientation = Quaternion(*quaternion)
        
    #     pos.header.stamp = rospy.Time.now() # Update timestamp for each published SP

    #     # Publishing to rostopic   
    #     self.pub_spt.publish(pos) # updated pose from pos.pose.orientation
    

    def Moving_vel(self): 
    #     # Initialise necessary headers
         pos = PositionTarget()
         pos.header = Header() # initialising a new header for a new PoseStamped()
         pos.header.frame_id = "Moving"
         pos.coordinate_frame = 1
         pos.type_mask = 64

    #     # Establish desired setpoints
         pos.position.x = self.pos_x_0  # North
         pos.position.y = self.pos_y_0
         pos.position.z = self.pos_z_0
         pos.velocity.x = 1.0
         pos.velocity.y = 1.0
         pos.velocity.z = 0.0
         pos.yaw = radians(self.yaw.data)
        
         pos.header.stamp = rospy.Time.now() # Update timestamp for each published SP

         # Publishing to rostopic   
         self.pub_pos.publish(pos) # updated pose 

    def Hovering_vel(self): 
    #     # Initialise necessary headers
         pos = PositionTarget()
         pos.header = Header() # initialising a new header for a new PoseStamped()
         pos.header.frame_id = "Hovering"
         pos.coordinate_frame = 1
         pos.type_mask = 64

    #     # Establish desired setpoints
         pos.position.x = self.pos_x_0  # North
         pos.position.y = self.pos_y_0
         pos.position.z = self.pos_z_0
         pos.velocity.x = 1.0
         pos.velocity.y = 1.0
         pos.velocity.z = 0.0
         pos.yaw = radians(self.yaw.data)
        
         pos.header.stamp = rospy.Time.now() # Update timestamp for each published SP

         # Publishing to rostopic   
         self.pub_pos.publish(pos) # updated pose 
    
    
   
    
if __name__ == '__main__':
    rospy.init_node("UAV" + id + '_borealis_movement', anonymous=True)

    node = borealis_movement()

    rospy.spin()  # spin() simply keeps python from exiting until this node is stopped


