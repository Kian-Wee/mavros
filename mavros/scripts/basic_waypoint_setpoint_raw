#!/usr/bin/env python

# Position and velocity setpoints

# Sauce
# https://docs.px4.io/master/en/ros/mavros_offboard.html
# https://gist.github.com/annesteenbeek/5370f62cf85bb9d6825327bff1b85293

import rospy
import mavros
from geometry_msgs.msg import PoseStamped
from mavros_msgs.msg import State, PositionTarget
from mavros_msgs.srv import CommandBool, SetMode

mavros.set_namespace()

# callback method for state sub
current_state = State() 
#offb_set_mode = SetMode
def state_cb(state):
    global current_state
    current_state = state

# local_pos_pub = rospy.Publisher(mavros.get_topic('setpoint_position', 'local'), PoseStamped, queue_size=10) #UAV0
# state_sub = rospy.Subscriber(mavros.get_topic('state'), State, state_cb)
# arming_client = rospy.ServiceProxy(mavros.get_topic('cmd', 'arming'), CommandBool)
#set_mode_client = rospy.ServiceProxy(mavros.get_topic('set_mode'), SetMode) 
local_pos_pub = rospy.Publisher('uav0/mavros/setpoint_raw/local', PositionTarget, queue_size=10) #UAV0
state_sub = rospy.Subscriber('uav0/mavros/state', State, state_cb)
arming_client = rospy.ServiceProxy('uav0/mavros/cmd/arming', CommandBool)

targetvelx=3
targetvely=3
targetvelz=0.5
altitude=0.75
length=1
coordframe=1

msg0 = PositionTarget()
msg0.position.x = 0
msg0.position.y = 0
msg0.position.z = altitude
msg0.velocity.x=targetvelx
msg0.velocity.y=targetvely
msg0.velocity.z=targetvelz
msg0.coordinate_frame = coordframe

msg = PositionTarget()
msg.position.x = length
msg.position.y = 0
msg.position.z = altitude
msg.velocity.x=targetvelx
msg.velocity.y=targetvely
msg.velocity.z=targetvelz
msg.coordinate_frame = coordframe

msg2 = PositionTarget()
msg2.position.x = length
msg2.position.y = length
msg2.position.z = altitude
msg2.velocity.x=targetvelx
msg2.velocity.y=targetvely
msg2.velocity.z=targetvelz
msg2.coordinate_frame = coordframe

msg3 = PositionTarget()
msg3.position.x = 0
msg3.position.y = length
msg3.position.z = altitude
msg3.velocity.x=targetvelx
msg3.velocity.y=targetvely
msg3.velocity.z=targetvelz
msg3.coordinate_frame = coordframe


local_position = PositionTarget()

def position_callback(data): # callback invoked with the message as the first arg
    local_position = data 

def position_control():

    print "position control"
    
    rospy.init_node('offb_node', anonymous=True)
    prev_state = current_state
    rosrate = 20
    rate = rospy.Rate(rosrate) # MUST be more then 2Hz

    # send a few setpoints before starting
    for i in range(100):
        local_pos_pub.publish(msg)
        rate.sleep()
    
    # wait for FCU connection
    while not current_state.connected:
        rate.sleep()

    last_request = rospy.get_rostime()
    while not rospy.is_shutdown():
        # now = rospy.get_rostime()
        # if current_state.mode != "OFFBOARD" and (now - last_request > rospy.Duration(5.)):
        #     set_mode_client(base_mode=0, custom_mode="OFFBOARD")
        #     last_request = now
        # else:
        #     if not current_state.armed and (now - last_request > rospy.Duration(5.)):
        #        arming_client(True)
        #        last_request = now 

        # # older versions of PX4 always return success==True, so better to check Status instead
        # if prev_state.armed != current_state.armed:
        #     rospy.loginfo("Vehicle armed: %r" % current_state.armed)
        # if prev_state.mode != current_state.mode: 
        #     rospy.loginfo("Current mode: %s" % current_state.mode)
        # prev_state = current_state

        # Update timestamp and publish pose 
        msg.header.stamp = rospy.Time.now()

        msgtemp = PositionTarget()
        msgtemp.position.x = local_position.position.x
        msgtemp.position.y = local_position.position.y
        msgtemp.position.z = local_position.position.z
        msgtemp.velocity.x = 0.5#local_position.velocity.x
        msgtemp.velocity.y = 0.5#local_position.velocity.y
        msgtemp.velocity.z = 0.5#local_position.velocity.z
        msgtemp.coordinate_frame = coordframe

        # print current_state
        # if current_state.armed == True:
        #     print "sending position"
        #     local_pos_pub.publish(msgtemp)
        #     rate.sleep()
        if current_state.armed == True and current_state.mode == "OFFBOARD":
            rate = rospy.Rate(rosrate)
            for i in range(50 * rosrate):
                print "sending origin"
                local_pos_pub.publish(msg0)
                rate.sleep()
            # for i in range(5 * rosrate):
            #     print "sending first waypoint"
            #     local_pos_pub.publish(msg)
            #     rate.sleep()
            # for i in range(5 * rosrate):
            #     print "sending second waypoint"
            #     local_pos_pub.publish(msg2)
            #     rate.sleep()
            # for i in range(5 * rosrate):
            #     print "back to third waypoint"
            #     local_pos_pub.publish(msg3)
            #     rate.sleep()
            # for i in range(60 * rosrate):
            #     print "back to origin"
            #     local_pos_pub.publish(msg0)
            #     rate.sleep()
            # for i in range(5 * rosrate):
            #     print "landing"
            #     set_mode_client(base_mode=0, custom_mode="AUTO.LAND")
            #     rate.sleep()'arming'
            print "disarming and ending"
            # arming_client(False)
            break
        else:
            print "not in offboard mode, sending current position"
            local_pos_pub.publish(msgtemp)
            rate.sleep()

if __name__ == '__main__':
    local_pos_sub = rospy.Subscriber("/mavros/local_position/pose", PoseStamped, position_callback)
    try:
        position_control()
    except rospy.ROSInterruptException:
        pass