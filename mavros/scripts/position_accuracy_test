#!/usr/bin/env python

# Basic script to test the variance of the position sensor

import rospy
import mavros
from geometry_msgs.msg import PoseStamped
from mavros_msgs.msg import State, PositionTarget
from mavros_msgs.srv import CommandBool, SetMode

mavros.set_namespace()

# callback method for state sub
current_state = State() 
#offb_set_mode = SetMode
def state_cb(state):
    global current_state
    current_state = state

local_pos_pub = rospy.Publisher('uav0/mavros/setpoint_position/local', PoseStamped, queue_size=10) #UAV0
state_sub = rospy.Subscriber('uav0/mavros/state', State, state_cb)
arming_client = rospy.ServiceProxy('uav0/mavros/cmd/arming', CommandBool)

local_position = PoseStamped()

xarr=[]
yarr=[]
zarr=[]

def position_callback(data): # callback invoked with the message as the first arg
    local_position = data
    #print data

def position_control():
    
    rospy.init_node('offb_node', anonymous=True)
    prev_state = current_state
    rosrate = 20
    rate = rospy.Rate(rosrate) # MUST be more then 2Hz
    
    # wait for FCU connection
    while not current_state.connected:
        rate.sleep()

    # last_request = rospy.get_rostime()
    while not rospy.is_shutdown():
        print local_position.pose.position.z
        print local_position.pose.orientation.w
        rate.sleep()


        # if current_state.armed == True:
        #     rate = rospy.Rate(rosrate)
        #     for i in range(1 * rosrate):
        #         print "capturing data"
        #         print local_position.position.z
        #         xarr.append(local_position.position.x)
        #         yarr.append(local_position.position.y)
        #         zarr.append(local_position.position.z)
        #         rate.sleep()
        #     print "finished collecting data, now processing"
        #     xavg=sum(xarr)/len(xarr)
        #     xdeviation=0
        #     for i in xarr:
        #         xdeviation += i - xavg
        #     print xavg
        #     print "xdeviation is", xdeviation

        #     break
        # else:
        #     print "not armed nor recording data"
        #     rate.sleep()

if __name__ == '__main__':
    local_pos_sub = rospy.Subscriber("/uav0/mavros/local_position/pose", PoseStamped, position_callback)
    try:
        position_control()
    except rospy.ROSInterruptException:
        pass